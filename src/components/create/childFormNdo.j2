{% if data.type == 'list' -%}
import React, { useState } from 'react';
import { useFormContext, useFieldArray } from "react-hook-form";
import { Card, Button, Accordion, Form, Pagination, Container, Tabs, Tab } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus } from '@fortawesome/free-solid-svg-icons';
import _, { get } from 'lodash'

import ArrayFunctions from '../ArrayFunctions'
import Header from '../Header';
import schema from '../../../schemas/aac_ndo_schema.json'

{% set placeholder = [] -%}
{%- for data in data.sublist -%}
{%- for key, value in data.items() -%}
{%- if value.ref not in placeholder -%}
import {{ value.ref | replace("_", " ") | title | replace(" ", "") }} from './{{ value.ref | replace("_", " ") | title | replace(" ", "") }}'
{% do placeholder.append(value.ref) %}
{%- endif -%}
{%- endfor -%}
{% endfor %}

const {{ data.title | replace("_", " ") | title | replace(" ", "") }} = React.memo(({ control, register, errors, clearErrors, setError, name }) => {
  const { fields, append, remove } = useFieldArray({
    control,
    name: name,
    mode: 'all'
  });
  
  const title = '{{ data.object_key | replace("_", " ") | title }}'
  
  const { getValues, setValue } = useFormContext()
  const formData = getValues()

  const { watch } = useFormContext();
  const schemaWatch = watch(`${name}`)

  const duplicate = (index) => {
    const ToDuplicate = { ...schemaWatch[index] };
    if (ToDuplicate.name) { ToDuplicate.name = ''; }
    if (ToDuplicate.ip) { ToDuplicate.ip = ''; }
    if (ToDuplicate.id) { ToDuplicate.id = ''; }
    append(ToDuplicate);
  };

  const handleDelete = (originalIndex) => {
    remove(originalIndex)
  };

  const [activeKeys, setActiveKeys] = useState({});
  const handleTabChange = (itemId, activeKey) => {
    setActiveKeys(prevKeys => ({ ...prevKeys, [itemId]: activeKey }));
  };

  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const paginatedFields = fields.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  return (
    <>
      {fields.length === 0 ? (
        <Container fluid className="d-flex justify-content-center">
          <h4 className='no-data'>Click '+ {title}' to create a new {title} </h4>
        </Container>
      ) : (
        paginatedFields.map((item, index) => {
          const originalIndex = (currentPage - 1) * itemsPerPage + index;
          const hasErrors = !!_.get(errors, `${name}.${originalIndex}`);
          {% set placeholder = [] %}
          {%- for data in data.sublist -%}
          {%- for key, value in data.items() %}
          {%- if value.ref not in placeholder -%}
          const is{{ value.ref | replace("_", " ") | title | replace(" ", "") }}Active = activeKeys[item.id] === '{{ value.ref | replace("_", "") }}';
          {% do placeholder.append(value.ref) %}
          {%- endif -%}
          {%- endfor -%}
          {% endfor %}
          return (
            <div key={item.id}>
              <Accordion className='mb-2'>
                <Accordion.Item eventKey={originalIndex.toString()}>
                  <Accordion.Header>

                    {
                      Header(originalIndex, name, hasErrors, formData, duplicate, title, handleDelete)
                    }

                  </Accordion.Header>
                  <Accordion.Body>
                    <Tabs
                      activeKey={activeKeys[item.id] || '{{ data.title | replace("_", "") | lower }}'}
                      onSelect={(k) => handleTabChange(item.id, k)}
                      className="mb-2"
                      id={item.id}
                    >
                      <Tab eventKey="{{ data.title | replace("_", "") | lower }}" title="{{ data.object_key | replace("_", " ") | title }}">
                        <Card>
                          <Card.Body>
                          {%- raw %}
                            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(400px, 1fr))', gridGap: '1rem' }}>{%- endraw %}
                              {Object.entries(get(schema, '{{ data.schema_ref }}', {})).map(([objectKey, value]) => (
                                <ArrayFunctions
                                  key={objectKey} 
                                  originalIndex={originalIndex}
                                  objectKey={objectKey}
                                  value={value}
                                  errors={errors}
                                  register={register}
                                  control={control}
                                  formData={formData}
                                  name={name}
                                  setError={setError}
                                  clearErrors={clearErrors}
                                  Form={Form}
                                />
                              ))}
                            </div>
                          </Card.Body>
                        </Card>
                      </Tab>
                      {%- for data in data.sublist -%}
                      {%- for key, value in data.items() %}
                        {% if value.ref -%}
                        <Tab eventKey="{{ value.ref | replace("_", "") }}" title="{{ key | replace("_", " ") | title }}">
                        {is{{ value.ref | replace("_", " ") | title | replace(" ", "") }}Active && (  
                            <{{ value.ref | replace("_", " ") | title | replace(" ", "") }}
                              key={item.id}
                              control={control}
                              name={`${name}[${originalIndex}].{{ key }}`}
                              register={register}
                              errors={errors}
                              setError={setError}
                              clearErrors={clearErrors}
                            />
                        )}
                        </Tab>
                        {% endif -%}
                      {% endfor -%}
                      {% endfor -%}
                    </Tabs>
                  </Accordion.Body>
                </Accordion.Item>
              </Accordion>
            </div >
          )
        })
      )}
      <div className="d-flex flex-wrap align-items-center justify-content-between">
        <Pagination className="mt-2">
          {Array(Math.ceil(fields.length / itemsPerPage)).fill().map((_, index) => (
            <Pagination.Item
              key={index}
              active={index === currentPage - 1}
              onClick={() => setCurrentPage(index + 1)}
            >
              {index + 1}
            </Pagination.Item>
          ))}
        </Pagination>
        {
          {%- raw %}
          fields.length !== 0 && (
            <div className="d-flex align-items-center" style={{ minWidth: '172px' }}>
              <span className='me-2 small-font'>Items per page:</span>
              <Form.Select className="mb-2" style={{ maxWidth: "75px" }} size="sm" label="Items per page" aria-label="Items per page" value={itemsPerPage} onChange={e => setItemsPerPage(Number(e.target.value))}>
                <option value={5}>5</option>
                <option value={10}>10</option>
                <option value={25}>25</option>
                <option value={50}>50</option>
              </Form.Select>
            </div>
          )
          {%- endraw %}
        }
      </div>
      <div>
        <Button variant="primary" size="sm" type="button" onClick={() => append({})}><FontAwesomeIcon icon={faPlus} /> {title}</Button>
      </div>
    </>
  )
})

export default {{ data.title | replace("_", " ") | title | replace(" ", "") }};

{% elif data.type == 'object' -%}
import React, { useState } from 'react';
import { Tabs, Tab, Card, Form } from 'react-bootstrap';
import _, { get } from 'lodash'
import Badge from '@mui/material/Badge';
import ErrorIcon from '@mui/icons-material/Error';

import ObjectFunctions from '../ObjectFunctions'
import schema from '../../../schemas/aac_ndo_schema.json'

{% set placeholder = [] -%}
{%- for data in data.sublist -%}
{%- for key, value in data.items() -%}
{%- if value.ref not in placeholder -%}
import {{ value.ref | replace("_", " ") | title | replace(" ", "") }} from './{{ value.ref | replace("_", " ") | title | replace(" ", "") }}'
{% do placeholder.append(value.ref) %}
{%- endif -%}
{%- endfor -%}
{% endfor -%}

const  {{ data.title | replace("_", " ") | title | replace(" ", "") }} = ({ control, register, errors, name, getValues, setValue, watch, setError, clearErrors }) => {
  {% for key, value in data.items() -%}
  {# Check if there's a dictionary other than 'sublist' #}
  {%- if value is mapping and key != 'sublist' %} 
  const [key, setKey] = useState('{{ data.title | replace("_", "") | lower }}'); // Keep state for the Tab selection
  {% break %}
  {% else %}
  {%- for data in data.sublist -%}
  {%- for key, value in data.items() -%}
  {% if value.ref -%}
  const [key, setKey] = useState('{{ value.ref | replace("_", "") }}'); // Keep state for the Tab selection
  {%- endif -%}
  {% break %}
  {%- endfor -%}
  {%- endfor -%}
  {%- endif -%}
  {%- endfor -%}
  
{%- raw %}  
  const tabTitle = (title, hasErrors, errorCount) => (
    <div style={{ position: 'relative', display: 'inline-block' }}>
      {title}
      {hasErrors &&
        <span style={{ position: 'absolute', top: -10, right: -22, zIndex: 9999 }}>
          <Badge >
            <ErrorIcon color="error" />
          </Badge>
        </span>
      }
    </div>
  );
  {%- endraw %}

  const [activeKeys, setActiveKeys] = useState({});
  const handleTabChange = (itemId, activeKey) => {
    setActiveKeys(prevKeys => ({ ...prevKeys, [itemId]: activeKey }));
  };
  {%- for key, value in data.items() -%}
  {# Check if there's a dictionary other than 'sublist' #}
  {%- if value is mapping and key != 'sublist' %} 
  const has{{ data.title | replace("_", " ") | title | replace(" ", "")}}Errors = Boolean(errors && errors[name] && errors[name].{{ data.object_key }})//;
  {% break %}
  {%- endif -%}
  {%- endfor -%}

  {% set placeholder = [] %}
  {%- for data in data.sublist -%}
  {%- for key, value in data.items() %}
  {%- if value.ref not in placeholder -%}
  const has{{ value.ref | replace("_", " ") | title | replace(" ", "")}}Errors = Boolean(errors && errors[name] && errors[name].{{ key }});
  {% do placeholder.append(value.ref) %}
  {%- endif -%}
  {%- endfor -%}
  {% endfor -%}

  {% for key, value in data.items() -%}
  {# Check if there's a dictionary other than 'sublist' #}
  {% if value is mapping and key != 'sublist' -%} 
  const is{{ data.title | replace("_", " ") | title | replace(" ", "") }}Active = key === '{{ data.title | replace("_", "") | lower }}';
  {% break %}
  {%- endif -%}
  {%- endfor -%}

  return (
    <div>
      <Tabs activeKey={key} onSelect={(k) => setKey(k)} className={`mb-3 tabs-title`} >
        {# Iterate over the keys and values in the item_value dict #}
        {% for key, value in data.items() -%}
        {# Check if there's a dictionary other than 'sublist' #}
        {% if value is mapping and key != 'sublist' -%} 
        <Tab eventKey="{{ data.title | replace("_", "") }}" title={tabTitle('{{ data.object_key | replace("_", " ") | title }}', has{{ data.title | replace("_", " ") | title | replace(" ", "") }}Errors)}>
          {is{{ data.title | replace("_", " ") | title | replace(" ", "") }}Active && (
            <Card>
              <Card.Body>
              {%- raw %} 
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(400px, 1fr))', gridGap: '1rem' }}>
              {%- endraw %} 
                  {Object.entries(get(schema, '{{ data.schema_ref }}', {})).map(([objectKey, value]) => (
                    <ObjectFunctions
                      key={objectKey}
                      objectKey={objectKey}
                      value={value}
                      errors={errors}
                      register={register}
                      control={control}
                      name={name}
                      Form={Form}
                      setError={setError}
                      clearErrors={clearErrors}
                    />
                  ))}
                </div>
              </Card.Body>
            </Card>
          )}
        </Tab>
        {% break %}
       {%- endif -%}
    {%- endfor -%}
    {%- for data in data.sublist -%}
    {%- for key, value in data.items() -%}
    {%- if value.ref -%}
        <Tab eventKey="{{ value.ref | replace("_", "") }}" title={tabTitle('{{ key | replace("_", " ") | title }}', has{{ value.ref | replace("_", " ") | title | replace(" ", "") }}Errors)}> 
          <{{ value.ref | replace("_", " ") | title | replace(" ", "") }}
              control={control}
              name={`${name}.{{ key }}`}
              register={register}
              errors={errors}
              watch={watch}
              getValues={getValues}
              setValue={setValue}
              setError={setError}
              clearErrors={clearErrors}
            />
        </Tab>
        {%- endif -%}
        {%- endfor -%}
      {%- endfor %}
      </Tabs>
    </div>
  )
}

export default {{ data.title | replace("_", " ") | title | replace(" ", "") }};

{% else %}
import React, { useState } from 'react';
import { Controller, } from "react-hook-form";
import { Tabs, Tab, Card, Form } from 'react-bootstrap';
import ReactSelect from 'react-select';
import CreatableSelect from 'react-select/creatable';
import cidrRegex from 'cidr-regex';
import ipRegex from 'ip-regex';
import _, { get } from 'lodash'
import Badge from '@mui/material/Badge';
import ErrorIcon from '@mui/icons-material/Error';

import ObjectFunctions from '../ObjectFunctions'
import schema from '../../../schemas/aac_ndo_schema.json'

const  {{ data.title | replace("_", " ") | title | replace(" ", "") }} = ({ control, register, errors, name, getValues, setValue, watch, setError, clearErrors }) => {

  {%- raw %}  
  const tabTitle = (title, hasErrors, errorCount) => (
    <div style={{ position: 'relative', display: 'inline-block' }}>
      {title}
      {hasErrors &&
        <span style={{ position: 'absolute', top: -10, right: -22, zIndex: 9999 }}>
          <Badge >
            <ErrorIcon color="error" />
          </Badge>
        </span>
      }
    </div>
  );
  {%- endraw %}
  const [key, setKey] = useState('{{ data.title | replace("_", "") | lower }}'); // Keep state for the Tab selection
  const has{{ data.title | replace("_", " ") | title | replace(" ", "")}}Errors = Boolean(errors && errors[name] && errors[name].{{ data.title }})//;
  
  const [createdOptions, setCreatedOptions] = useState([]);

  return (
    <div>
    <Tabs
        activeKey={key}
        className={`mb-3 tabs-title`}
      //fill
      //justify
      >
        <Tab eventKey="{{ data.title | replace("_", "") }}" title={tabTitle('{{ data.title | replace("_", " ") | title }}', has{{ data.title | replace("_", " ") | title | replace(" ", "") }}Errors)}>
            <Card>
              <Card.Body>
              {%- raw %} 
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(400px, 1fr))', gridGap: '1rem' }}>
              {%- endraw %} 
                  {Object.entries(get(schema, '{{ data.schema_ref }}', {})).map(([objectKey, value]) => (
                    <ObjectFunctions
                      key={objectKey}
                      objectKey={objectKey}
                      value={value}
                      errors={errors}
                      register={register}
                      control={control}
                      name={name}
                      Form={Form}
                      setError={setError}
                      clearErrors={clearErrors}
                    />
                  ))}
                </div>
              </Card.Body>
            </Card>
        </Tab>
      </Tabs>
    </div>
)}

export default {{ data.title | replace("_", " ") | title | replace(" ", "") }};
{% endif -%}